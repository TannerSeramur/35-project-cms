{"ast":null,"code":"import superagent from 'superagent';\nexport var setModel = function setModel(model) {\n  return {\n    type: 'MODEL',\n    payload: model\n  };\n};\nexport var getSchema = function getSchema(model, url) {\n  return function (dispatch) {\n    superagent.get(url).then(function (data) {\n      dispatch(runGetSchema({\n        model: model,\n        schema: data.body\n      }));\n    });\n  };\n};\n\nvar runGetSchema = function runGetSchema(payload) {\n  return {\n    type: 'SCHEMA',\n    payload: payload\n  };\n};\n\nexport var getModels = function getModels(url) {\n  return function (dispatch) {\n    superagent.get(url).then(function (data) {\n      dispatch(runGetModels(data.body));\n    });\n  };\n};\n\nvar runGetModels = function runGetModels(payload) {\n  return {\n    type: 'MODELS',\n    payload: payload\n  };\n};\n\nexport var getRecords = function getRecords(url) {\n  return function (dispatch) {\n    console.log('first y0');\n    superagent.get(url).then(function (data) {\n      dispatch(runGetRecords(data.body.results));\n    });\n  };\n};\n\nvar runGetRecords = function runGetRecords(payload) {\n  console.log(payload, 'YOOO');\n  return {\n    type: 'RECORDS',\n    payload: payload\n  };\n};\n\nexport var getRecord = function getRecord(url) {\n  return function (dispatch) {\n    superagent.get(url).then(function (data) {\n      console.log(data, 'data');\n      dispatch(runGetRecord(data.body));\n    });\n  };\n};\n\nvar runGetRecord = function runGetRecord(payload) {\n  return {\n    type: 'RECORD',\n    payload: payload\n  };\n};\n\nexport var post = function post(model, url, record) {\n  return function (dispatch) {\n    superagent.post(url).send(record).then(function (data) {\n      dispatch(runPost({\n        model: model,\n        record: data.body\n      }));\n    });\n  };\n};\n\nvar runPost = function runPost(payload) {\n  return {\n    type: 'POST',\n    payload: payload\n  };\n};\n\nexport var put = function put(model, url, record) {\n  return function (dispatch) {\n    superagent.put(url).send(record).then(function (data) {\n      dispatch(runPut({\n        model: model,\n        record: data.body\n      }));\n    });\n  };\n};\n\nvar runPut = function runPut(payload) {\n  return {\n    type: 'PUT',\n    payload: payload\n  };\n};\n\nexport var destroy = function destroy(model, id, url) {\n  return function (dispatch) {\n    superagent.delete(url).then(function (data) {\n      dispatch(runDestroy({\n        model: model,\n        id: id\n      }));\n    });\n  };\n};\n\nvar runDestroy = function runDestroy(payload) {\n  return {\n    type: 'DELETE',\n    payload: payload\n  };\n};\n\nexport var clearRecord = function clearRecord() {\n  return {\n    type: 'CLEAR'\n  };\n};","map":{"version":3,"sources":["/Users/TannerSeramur/CodeFellows/401/labs/35-project-cms/starter-code-cms-redux/src/components/cms/actions.js"],"names":["superagent","setModel","model","type","payload","getSchema","url","dispatch","get","then","data","runGetSchema","schema","body","getModels","runGetModels","getRecords","console","log","runGetRecords","results","getRecord","runGetRecord","post","record","send","runPost","put","runPut","destroy","id","delete","runDestroy","clearRecord"],"mappings":"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","sourcesContent":["import superagent from 'superagent';\n\nexport const setModel = model => {\n  return {\n    type: 'MODEL',\n    payload: model\n  };\n};\n\nexport const getSchema = (model, url) => dispatch => {\n  superagent.get(url).then(data => {\n    dispatch(runGetSchema({ model: model, schema: data.body }));\n  });\n};\n\nconst runGetSchema = payload => {\n  return {\n    type: 'SCHEMA',\n    payload: payload\n  };\n};\n\nexport const getModels = url => dispatch => {\n  superagent.get(url).then(data => {\n    dispatch(runGetModels(data.body));\n  });\n};\n\nconst runGetModels = payload => {\n  return {\n    type: 'MODELS',\n    payload: payload\n  };\n};\n\nexport const getRecords = url => dispatch => {\n  console.log('first y0');\n\n  superagent.get(url).then(data => {\n    dispatch(runGetRecords(data.body.results));\n  });\n};\n\nconst runGetRecords = payload => {\n  console.log(payload, 'YOOO')\n  return {\n    type: 'RECORDS',\n    payload: payload\n  };\n};\n\nexport const getRecord = url => dispatch => {\n  superagent.get(url).then(data => {\n    console.log(data, 'data');\n    dispatch(runGetRecord(data.body));\n  });\n};\n\nconst runGetRecord = payload => {\n\n  return {\n    type: 'RECORD',\n    payload: payload\n  };\n};\n\nexport const post = (model, url, record) => dispatch => {\n  superagent\n    .post(url)\n    .send(record)\n    .then(data => {\n      dispatch(runPost({ model, record: data.body }));\n    });\n};\n\nconst runPost = payload => {\n  return {\n    type: 'POST',\n    payload: payload\n  };\n};\n\nexport const put = (model, url, record) => dispatch => {\n  superagent\n    .put(url)\n    .send(record)\n    .then(data => {\n      dispatch(runPut({ model, record: data.body }));\n    });\n};\n\nconst runPut = payload => {\n  return {\n    type: 'PUT',\n    payload: payload\n  };\n};\n\nexport const destroy = (model, id, url) => dispatch => {\n  superagent.delete(url).then(data => {\n    dispatch(runDestroy({ model, id }));\n  });\n};\n\nconst runDestroy = payload => {\n  return {\n    type: 'DELETE',\n    payload: payload\n  };\n};\n\nexport const clearRecord = () => {\n  return {\n    type: 'CLEAR'\n  };\n};\n"]},"metadata":{},"sourceType":"module"}